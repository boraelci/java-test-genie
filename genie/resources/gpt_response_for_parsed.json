{
  "identifier": "CryptocurrencyServiceTest",
  "file": "src/test/java/com/ase/restservice/service/CryptocurrencyServiceTest.java",
  "content": "import static org.junit.Assert.*;\nimport static org.mockito.Mockito.*;\n\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Optional;\n\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.junit.MockitoJUnitRunner;\n\nimport com.ase.restservice.exception.ResourceAlreadyExistsException;\nimport com.ase.restservice.exception.ResourceNotFoundException;\nimport com.ase.restservice.model.Cryptocurrency;\nimport com.ase.restservice.repository.CryptocurrencyRepository;\n\n@RunWith(MockitoJUnitRunner.class)\npublic class CryptocurrencyServiceTest {\n\n    @Mock\n    CryptocurrencyRepository cryptocurrencyRepository;\n\n    @InjectMocks\n    CryptocurrencyService cryptocurrencyService;\n\n    private static final Cryptocurrency CRYPTOCURRENCY = new Cryptocurrency();\n\n    @Before\n    public void setUp() {\n        CRYPTOCURRENCY.setCryptocurrencyId(\"bitcoin\");\n        CRYPTOCURRENCY.setPrice(1000.0f);\n    }\n\n    @Test(expected = ResourceAlreadyExistsException.class)\n    public void createCryptocurrency_CryptocurrencyExists() throws ResourceAlreadyExistsException {\n        when(cryptocurrencyRepository.existsById(CRYPTOCURRENCY.getCryptocurrencyId())).thenReturn(true);\n        cryptocurrencyService.createCryptocurrency(CRYPTOCURRENCY);\n    }\n\n    @Test\n    public void createCryptocurrency_CryptocurrencyDoesNotExist() throws ResourceAlreadyExistsException {\n        when(cryptocurrencyRepository.existsById(CRYPTOCURRENCY.getCryptocurrencyId())).thenReturn(false);\n        when(cryptocurrencyRepository.save(CRYPTOCURRENCY)).thenReturn(CRYPTOCURRENCY);\n        Cryptocurrency savedCryptocurrency = cryptocurrencyService.createCryptocurrency(CRYPTOCURRENCY);\n        assertEquals(CRYPTOCURRENCY, savedCryptocurrency);\n        verify(cryptocurrencyRepository).existsById(CRYPTOCURRENCY.getCryptocurrencyId());\n        verify(cryptocurrencyRepository).save(CRYPTOCURRENCY);\n    }\n\n    @Test(expected = ResourceNotFoundException.class)\n    public void updateCryptocurrency_CryptocurrencyDoesNotExist() throws ResourceNotFoundException {\n        when(cryptocurrencyRepository.existsById(CRYPTOCURRENCY.getCryptocurrencyId())).thenReturn(false);\n        cryptocurrencyService.updateCryptocurrency(CRYPTOCURRENCY);\n    }\n\n    @Test\n    public void updateCryptocurrency_CryptocurrencyExists() throws ResourceNotFoundException {\n        when(cryptocurrencyRepository.existsById(CRYPTOCURRENCY.getCryptocurrencyId())).thenReturn(true);\n        when(cryptocurrencyRepository.save(CRYPTOCURRENCY)).thenReturn(CRYPTOCURRENCY);\n        Cryptocurrency savedCryptocurrency = cryptocurrencyService.updateCryptocurrency(CRYPTOCURRENCY);\n        assertEquals(CRYPTOCURRENCY, savedCryptocurrency);\n        verify(cryptocurrencyRepository).existsById(CRYPTOCURRENCY.getCryptocurrencyId());\n        verify(cryptocurrencyRepository).save(CRYPTOCURRENCY);\n    }\n\n    @Test(expected = ResourceNotFoundException.class)\n    public void deleteCryptocurrencyById_CryptocurrencyDoesNotExist() throws ResourceNotFoundException {\n        when(cryptocurrencyRepository.existsById(CRYPTOCURRENCY.getCryptocurrencyId())).thenReturn(false);\n        cryptocurrencyService.deleteCryptocurrencyById(CRYPTOCURRENCY.getCryptocurrencyId());\n    }\n\n    @Test\n    public void deleteCryptocurrencyById_CryptocurrencyExists() throws ResourceNotFoundException {\n        when(cryptocurrencyRepository.existsById(CRYPTOCURRENCY.getCryptocurrencyId())).thenReturn(true);\n        cryptocurrencyService.deleteCryptocurrencyById(CRYPTOCURRENCY.getCryptocurrencyId());\n        verify(cryptocurrencyRepository).deleteById(CRYPTOCURRENCY.getCryptocurrencyId());\n    }\n\n    @Test(expected = ResourceNotFoundException.class)\n    public void getCryptocurrencyById_CryptocurrencyNotFound() throws ResourceNotFoundException {\n        when(cryptocurrencyRepository.findById(CRYPTOCURRENCY.getCryptocurrencyId())).thenReturn(Optional.empty());\n        cryptocurrencyService.getCryptocurrencyById(CRYPTOCURRENCY.getCryptocurrencyId());\n    }\n\n    @Test\n    public void getCryptocurrencyById_CryptocurrencyFound() throws ResourceNotFoundException {\n        when(cryptocurrencyRepository.findById(CRYPTOCURRENCY.getCryptocurrencyId())).thenReturn(Optional.of(CRYPTOCURRENCY));\n        Cryptocurrency foundCryptocurrency = cryptocurrencyService.getCryptocurrencyById(CRYPTOCURRENCY.getCryptocurrencyId());\n        assertEquals(CRYPTOCURRENCY, foundCryptocurrency);\n        verify(cryptocurrencyRepository).findById(CRYPTOCURRENCY.getCryptocurrencyId());\n    }\n\n    @Test(expected = ResourceNotFoundException.class)\n    public void updateCryptocurrencyPrice_CryptocurrencyNotFound() throws ResourceNotFoundException {\n        when(cryptocurrencyRepository.findById(CRYPTOCURRENCY.getCryptocurrencyId())).thenReturn(Optional.empty());\n        cryptocurrencyService.updateCryptocurrencyPrice(CRYPTOCURRENCY.getCryptocurrencyId(), CRYPTOCURRENCY.getPrice());\n    }\n\n    @Test\n    public void updateCryptocurrencyPrice_CryptocurrencyFound() throws ResourceNotFoundException {\n        when(cryptocurrencyRepository.findById(CRYPTOCURRENCY.getCryptocurrencyId())).thenReturn(Optional.of(CRYPTOCURRENCY));\n        when(cryptocurrencyRepository.save(CRYPTOCURRENCY)).thenReturn(CRYPTOCURRENCY);\n        Cryptocurrency updatedCryptocurrency = cryptocurrencyService.updateCryptocurrencyPrice(CRYPTOCURRENCY.getCryptocurrencyId(), CRYPTOCURRENCY.getPrice());\n        assertEquals(CRYPTOCURRENCY, updatedCryptocurrency);\n        verify(cryptocurrencyRepository).findById(CRYPTOCURRENCY.getCryptocurrencyId());\n        verify(cryptocurrencyRepository).save(CRYPTOCURRENCY);\n    }\n\n    @Test\n    public void getAllCryptocurrencies() {\n        List<Cryptocurrency> expectedCryptocurrencies = Arrays.asList(new Cryptocurrency(), new Cryptocurrency());\n        when(cryptocurrencyRepository.findAll()).thenReturn(expectedCryptocurrencies);\n        List<Cryptocurrency> actualCryptocurrencies = cryptocurrencyService.getAllCryptocurrencies();\n        assertEquals(expectedCryptocurrencies, actualCryptocurrencies);\n        verify(cryptocurrencyRepository).findAll();\n    }\n\n    @Test(expected = ResourceNotFoundException.class)\n    public void getCryptocurrencyPrice_CryptocurrencyNotFound() throws ResourceNotFoundException {\n        when(cryptocurrencyRepository.findById(CRYPTOCURRENCY.getCryptocurrencyId())).thenReturn(Optional.empty());\n        cryptocurrencyService.getCryptocurrencyPrice(CRYPTOCURRENCY.getCryptocurrencyId());\n    }\n\n    @Test\n    public void getCryptocurrencyPrice_CryptocurrencyFound() throws ResourceNotFoundException {\n        when(cryptocurrencyRepository.findById(CRYPTOCURRENCY.getCryptocurrencyId())).thenReturn(Optional.of(CRYPTOCURRENCY));\n        Float actualPrice = cryptocurrencyService.getCryptocurrencyPrice(CRYPTOCURRENCY.getCryptocurrencyId());\n        assertEquals(CRYPTOCURRENCY.getPrice(), actualPrice);\n        verify(cryptocurrencyRepository).findById(CRYPTOCURRENCY.getCryptocurrencyId());\n    }\n\n}"
}
