{
  "identifier": "AssetServiceTest",
  "file": "src/test/java/com/ase/restservice/service/AssetServiceTest.java",
  "content": "import org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.junit.jupiter.MockitoExtension;\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\n\n@ExtendWith(MockitoExtension.class)\npublic class AssetServiceTest {\n\n    @Mock\n    AssetRepository assetRepository;\n\n    @Mock\n    AccountRepository accountRepository;\n\n    @Mock\n    StockService stockService;\n\n    @Mock\n    CryptocurrencyService cryptocurrencyService;\n\n    @Mock\n    NFTService nftService;\n\n    @InjectMocks\n    private AssetService assetService;\n\n    private Asset asset;\n    private AssetId assetId;\n    private Account account;\n    private final String ACCOUNT_ID = \"12345\";\n    private final String TRADABLE_TYPE = \"stock\";\n    private final String TRADABLE_ID = \"GOOG\";\n    private final Float QUANTITY = 50.0f;\n\n    @BeforeEach\n    void setUp() {\n        account = new Account();\n        account.setAccountId(ACCOUNT_ID);\n        account.setStartingBalance(100f);\n        account.setBalance(100f);\n\n        assetId = new AssetId(ACCOUNT_ID, TRADABLE_TYPE, TRADABLE_ID);\n        asset = new Asset();\n        asset.setAssetId(assetId);\n        asset.setTradableType(TRADABLE_TYPE);\n        asset.setTradableId(TRADABLE_ID);\n        asset.setQuantity(QUANTITY);\n    }\n\n    @Test\n    public void testCreateAsset() throws ResourceAlreadyExistsException {\n        when(assetRepository.existsById(asset.getAssetId())).thenReturn(false);\n        when(assetRepository.save(asset)).thenReturn(asset);\n\n        Asset createdAsset = assetService.createAsset(asset);\n\n        assertNotNull(createdAsset);\n        assertEquals(asset, createdAsset);\n        verify(assetRepository, times(1)).existsById(asset.getAssetId());\n        verify(assetRepository, times(1)).save(asset);\n    }\n\n    @Test\n    public void testCreateAssetAlreadyExists() {\n        when(assetRepository.existsById(asset.getAssetId())).thenReturn(true);\n        assertThrows(ResourceAlreadyExistsException.class, () ->\n                assetService.createAsset(asset)\n        );\n        verify(assetRepository, times(1)).existsById(asset.getAssetId());\n        verify(assetRepository, times(0)).save(any(Asset.class));\n    }\n\n    @Test\n    public void testUpdateAsset() throws ResourceNotFoundException {\n        when(assetRepository.existsById(asset.getAssetId())).thenReturn(true);\n        when(assetRepository.save(asset)).thenReturn(asset);\n        Asset updatedAsset = assetService.updateAsset(asset);\n\n        assertNotNull(updatedAsset);\n        assertEquals(asset, updatedAsset);\n        verify(assetRepository, times(1)).existsById(asset.getAssetId());\n        verify(assetRepository, times(1)).save(asset);\n    }\n\n    @Test\n    public void testUpdateAssetNotFound() {\n        when(assetRepository.existsById(asset.getAssetId())).thenReturn(false);\n        assertThrows(ResourceNotFoundException.class, () ->\n                assetService.updateAsset(asset)\n        );\n        verify(assetRepository, times(1)).existsById(asset.getAssetId());\n        verify(assetRepository, times(0)).save(any(Asset.class));\n    }\n\n    @Test\n    public void testDeleteAssetById() throws ResourceNotFoundException {\n        when(assetRepository.findById(assetId)).thenReturn(java.util.Optional.ofNullable(asset));\n